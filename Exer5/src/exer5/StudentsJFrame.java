/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package exer5;

import java.sql.SQLException;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;


public class StudentsJFrame extends javax.swing.JFrame {

 private DB db;
 private SQL sql;

 private SubjectsJFrame subjectsJFrame;
 private TeachersJFrame teachersJFrame;
 private Functions functions;
    public StudentsJFrame(SQL sql, DB db) {
        
        initComponents();
        this.sql = sql;
        this.db = db;
        sql.GetResultSetSQL(this.getName(), students_table);
        
    }
    
    
    public void setSubjectsJFrame(SubjectsJFrame subjectsJFrame){
        this.subjectsJFrame = subjectsJFrame;
    }
    
    public void setTeachersJFrame(TeachersJFrame teachersJFrame){
        this.teachersJFrame = teachersJFrame;
    }
    
    public void setFunctions(Functions functions){
        this.functions = functions;
    }
    

    
     

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        id_textField = new javax.swing.JTextField();
        name_textField = new javax.swing.JTextField();
        address_textField = new javax.swing.JTextField();
        course_textField = new javax.swing.JTextField();
        gender_textField = new javax.swing.JTextField();
        year_textField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        students_table = new javax.swing.JTable();
        save_button = new javax.swing.JButton();
        update_button = new javax.swing.JButton();
        delete_button = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        idFilter_textField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        id_comboBox = new javax.swing.JComboBox<>();
        nameFilterEnd_textField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        addr_comboBox = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        crs_comboBox = new javax.swing.JComboBox<>();
        crsFilter_textField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        gender_comboBox = new javax.swing.JComboBox<>();
        genderFilter_textField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        year_comboBox = new javax.swing.JComboBox<>();
        yearFilter_textField = new javax.swing.JTextField();
        addrFilterStart_textField = new javax.swing.JTextField();
        idLogic_comboBox = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        name_comboBox = new javax.swing.JComboBox<>();
        nameFilterStart_textField = new javax.swing.JTextField();
        addrFilterEnd_textField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        enrolledSubj_table = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        enrollAdd_button = new javax.swing.JButton();
        enrollDrop_button = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        students_item = new javax.swing.JMenuItem();
        subjects_item = new javax.swing.JMenuItem();
        teachers_item = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        firstSem_Menu = new javax.swing.JMenuItem();
        secondSem_Menu = new javax.swing.JMenuItem();
        summer_Menu = new javax.swing.JMenuItem();
        delete_Menu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Students Menu");
        setName("studentsJFrame"); // NOI18N
        setResizable(false);

        jLabel1.setText("Student ID");

        jLabel2.setText("Student Name");

        jLabel3.setText("Student Address");

        jLabel4.setText("Student Course");

        jLabel5.setText("Student Gender");

        jLabel6.setText("Student Year");

        students_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "studid", "studname", "studaddr", "studcrs", "studgender", "yrlvl", "units"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        students_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                students_tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(students_table);
        if (students_table.getColumnModel().getColumnCount() > 0) {
            students_table.getColumnModel().getColumn(0).setResizable(false);
            students_table.getColumnModel().getColumn(1).setResizable(false);
            students_table.getColumnModel().getColumn(2).setResizable(false);
            students_table.getColumnModel().getColumn(3).setResizable(false);
            students_table.getColumnModel().getColumn(4).setResizable(false);
            students_table.getColumnModel().getColumn(5).setResizable(false);
        }

        save_button.setText("Save");
        save_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_buttonActionPerformed(evt);
            }
        });

        update_button.setText("Update");
        update_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_buttonActionPerformed(evt);
            }
        });

        delete_button.setText("Delete");
        delete_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_buttonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 103));

        jLabel7.setText("Filters");

        jLabel8.setFont(new java.awt.Font("Liberation Sans", 1, 13)); // NOI18N
        jLabel8.setText("Student ID");

        idFilter_textField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                idFilter_textFieldKeyReleased(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Liberation Sans", 1, 13)); // NOI18N
        jLabel9.setText("Student Name");

        id_comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AND", "OR", "NOT" }));
        id_comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                id_comboBoxActionPerformed(evt);
            }
        });

        nameFilterEnd_textField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameFilterEnd_textFieldKeyReleased(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Liberation Sans", 1, 13)); // NOI18N
        jLabel10.setText("Student Addr");

        addr_comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AND", "OR", "NOT" }));
        addr_comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addr_comboBoxActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Liberation Sans", 1, 13)); // NOI18N
        jLabel11.setText("Student Course");

        crs_comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AND", "OR", "NOT" }));
        crs_comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crs_comboBoxActionPerformed(evt);
            }
        });

        crsFilter_textField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                crsFilter_textFieldKeyReleased(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Liberation Sans", 1, 13)); // NOI18N
        jLabel12.setText("Student Gender");

        gender_comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AND", "OR", "NOT" }));
        gender_comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gender_comboBoxActionPerformed(evt);
            }
        });

        genderFilter_textField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                genderFilter_textFieldKeyReleased(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Liberation Sans", 1, 13)); // NOI18N
        jLabel13.setText("Student Year");

        year_comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AND", "OR", "NOT" }));
        year_comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                year_comboBoxActionPerformed(evt);
            }
        });

        yearFilter_textField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                yearFilter_textFieldKeyReleased(evt);
            }
        });

        addrFilterStart_textField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                addrFilterStart_textFieldKeyReleased(evt);
            }
        });

        idLogic_comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", ">=", "<=", "<", ">", "<>" }));
        idLogic_comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idLogic_comboBoxActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Liberation Sans", 0, 13)); // NOI18N
        jLabel14.setText("Ends");

        jLabel15.setFont(new java.awt.Font("Liberation Sans", 0, 13)); // NOI18N
        jLabel15.setText("Starts");

        jLabel16.setFont(new java.awt.Font("Liberation Sans", 0, 13)); // NOI18N
        jLabel16.setText("Starts");

        jLabel17.setFont(new java.awt.Font("Liberation Sans", 0, 13)); // NOI18N
        jLabel17.setText("Ends");

        name_comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AND", "OR", "NOT" }));
        name_comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                name_comboBoxActionPerformed(evt);
            }
        });

        nameFilterStart_textField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameFilterStart_textFieldKeyReleased(evt);
            }
        });

        addrFilterEnd_textField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                addrFilterEnd_textFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(crs_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel10)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gender_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(idLogic_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(idFilter_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel13)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(yearFilter_textField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(103, 103, 103)
                            .addComponent(year_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(genderFilter_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(crsFilter_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(id_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nameFilterStart_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameFilterEnd_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addr_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addrFilterStart_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addrFilterEnd_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(name_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(12, 12, 12)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idLogic_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idFilter_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(id_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14)
                        .addComponent(nameFilterEnd_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(nameFilterStart_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addr_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addrFilterStart_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17)
                    .addComponent(addrFilterEnd_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(name_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(crs_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(crsFilter_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gender_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(genderFilter_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(year_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(yearFilter_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jLabel18.setText("Enrolled Subjects");

        enrolledSubj_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "subjid", "subjode", "subjdesc", "subjunits", "subjsched"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        enrolledSubj_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enrolledSubj_tableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(enrolledSubj_table);
        if (enrolledSubj_table.getColumnModel().getColumnCount() > 0) {
            enrolledSubj_table.getColumnModel().getColumn(0).setResizable(false);
            enrolledSubj_table.getColumnModel().getColumn(1).setResizable(false);
            enrolledSubj_table.getColumnModel().getColumn(2).setResizable(false);
            enrolledSubj_table.getColumnModel().getColumn(3).setResizable(false);
            enrolledSubj_table.getColumnModel().getColumn(4).setResizable(false);
        }

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        enrollAdd_button.setText("Add");
        enrollAdd_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enrollAdd_buttonActionPerformed(evt);
            }
        });

        enrollDrop_button.setText("Drop");
        enrollDrop_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enrollDrop_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(enrollDrop_button)
                    .addComponent(enrollAdd_button))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(enrollAdd_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(enrollDrop_button)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jMenu1.setText("Menu");

        students_item.setText("Students");
        students_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                students_itemActionPerformed(evt);
            }
        });
        jMenu1.add(students_item);

        subjects_item.setText("Subjects");
        subjects_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjects_itemActionPerformed(evt);
            }
        });
        jMenu1.add(subjects_item);

        teachers_item.setText("Teachers");
        teachers_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teachers_itemActionPerformed(evt);
            }
        });
        jMenu1.add(teachers_item);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("New");

        firstSem_Menu.setText("1st Semester");
        firstSem_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstSem_MenuActionPerformed(evt);
            }
        });
        jMenu2.add(firstSem_Menu);

        secondSem_Menu.setText("2nd Semester");
        secondSem_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondSem_MenuActionPerformed(evt);
            }
        });
        jMenu2.add(secondSem_Menu);

        summer_Menu.setText("Summer");
        summer_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summer_MenuActionPerformed(evt);
            }
        });
        jMenu2.add(summer_Menu);

        delete_Menu.setText("Delete");
        delete_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_MenuActionPerformed(evt);
            }
        });
        jMenu2.add(delete_Menu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(22, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel4))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(course_textField, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                                    .addComponent(gender_textField)
                                    .addComponent(year_textField)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(save_button)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(update_button)
                                .addGap(12, 12, 12)
                                .addComponent(delete_button))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(id_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(name_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(24, 24, 24)
                                .addComponent(address_textField))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel18)
                        .addGap(173, 173, 173)))
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12))
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(id_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(name_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(address_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(course_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(gender_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(year_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save_button)
                    .addComponent(update_button)
                    .addComponent(delete_button))
                .addGap(35, 35, 35)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void students_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_students_itemActionPerformed

             this.setVisible(true);
    }//GEN-LAST:event_students_itemActionPerformed

    private void subjects_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjects_itemActionPerformed
             
             subjectsJFrame.setVisible(true);
    }//GEN-LAST:event_subjects_itemActionPerformed

    private void teachers_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teachers_itemActionPerformed
             
             TeachersJFrame teachersFrame = new TeachersJFrame();
             teachersFrame.setVisible(true);
    }//GEN-LAST:event_teachers_itemActionPerformed

   
    
    
    private void save_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_buttonActionPerformed

        String textFieldValues[] =  
            {
            id_textField.getText(), name_textField.getText(),
            address_textField.getText(), course_textField.getText(), 
            gender_textField.getText(), year_textField.getText()};
       

        // checks if ID is a valid id    
        // checks if ID provided already exists
        // so code can insert it to DB. StudentsJFrame studentsJFrame = new StudentsJFrame();
        if (functions.IsANumber(functions.getTextFieldValues(textFieldValues), this.getName())){
            if (!functions.IsExistingID(functions.getTextFieldValues(textFieldValues), this.getName())){
                // includes frame name to verify which frame
                // is sending the setInsertSQL
                 sql.setInsertSQL(textFieldValues, this.getName());
                 String insertSQL = sql.getInsertSQL(this.getName());
                 db.executeUpdate(insertSQL);
                 sql.GetResultSetSQL(this.getName(), students_table);
                System.out.println("Student ID data inserted.");
                return;
            }
            System.out.println("Student ID provided already exists!");
            System.out.println("Please use Update instead.");
            }
            
        
    }//GEN-LAST:event_save_buttonActionPerformed

    private void update_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_buttonActionPerformed
        String textFieldValues[] =  
             // retrieve current frame name for Functions
             // if condition. 
            {
            id_textField.getText(), name_textField.getText(),
            address_textField.getText(), course_textField.getText(), 
            gender_textField.getText(), year_textField.getText()};
        
        db.connectDB();

        //Deletes row and replaces it with a new and updated one.
        // String update = "DELETE FROM Students WHERE studid='" + id + "'";
        
      
       if (functions.IsANumber(functions.getTextFieldValues(textFieldValues), this.getName())){
            if (functions.IsExistingID(functions.getTextFieldValues(textFieldValues), this.getName())){
                sql.setUpdateSQL(textFieldValues, this.getName());
                String updateSQL = sql.getUpdateSQL(this.getName());
                db.executeUpdate(updateSQL);
                sql.GetResultSetSQL(this.getName(), students_table);
                System.out.println("Student ID data updated.");
                return;
            }
            return;
         }
            System.out.println("Student ID does not exist!");
            System.out.println("Please use Save instead.");
    }//GEN-LAST:event_update_buttonActionPerformed

    // checks if filterString in GetFilter returns an empty string
    // or with fill
    boolean IsFilterEmpty(String filterString){
        return filterString.isBlank();
    }
 

     
    
     
     
   
    private void delete_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_buttonActionPerformed
       
        if (!IsFilterEmpty(GetFilterSQL())){   
            // provides empty textFieldValues for setDeleteSQL
            // since delete requires textfieldValues
            // but filter values is used instead
            // to get deleteValues
            
            for (int i = 0; i < filterSQL.GetStudentIdsFromResultSet().size(); i++){
                String textFieldValues[] =  
            {filterSQL.GetStudentIdsFromResultSet().get(i).toString(),"","","","",""};
                // retrieves deleteSQL from new SQL set in setDeleteSQL
                sql.setDeleteSQL(textFieldValues, this.getName());
                String deleteSQL = sql.getDeleteSQL(this.getName());
                db.executeUpdate(deleteSQL);
            }
 
            sql.GetResultSetSQL(this.getName(), students_table);
            filterSQL.ClearStudentIdsFromResultSet();
            
            return;
        }
        
        String textFieldValues[] =  
            {
            id_textField.getText(), name_textField.getText(),
            address_textField.getText(), course_textField.getText(), 
            gender_textField.getText(), year_textField.getText()};
        
        db.connectDB();
        if (!functions.IsExistingID(textFieldValues, this.getName())){
            System.out.println("Student ID provided does not exist!");
            System.out.println("Cannot delete data from Student ID.");
            return;
        }
        
        // checks if filterString from GetFilterSQL is empty
        
        
        
       
        sql.setDeleteSQL(textFieldValues, this.getName());
        String deleteSQL = sql.getDeleteSQL(this.getName());
        db.executeUpdate(deleteSQL);
        sql.GetResultSetSQL(this.getName(), students_table);
        System.out.println("Student ID data deleted.");
    }//GEN-LAST:event_delete_buttonActionPerformed
    
    

    
    private String[] idFilter_values;
    
    public String GetFilterSQL(){
        
        
        DefaultTableModel tableModel = (DefaultTableModel) students_table.getModel();
        sql.ClearJTable(tableModel);
        
        String filterString = "";
         if(!idFilter_textField.getText().equals("")){
            filterString = " WHERE studid " + idLogic_comboBox.getSelectedItem() + idFilter_textField.getText();
        }
        if(!nameFilterStart_textField.getText().equals("")){
            if(idFilter_textField.getText().equals("")){    
                filterString = String.format("WHERE studName like '%s%%'", nameFilterStart_textField.getText());
            }else if(!nameFilterEnd_textField.getText().equals("")){
                filterString += String.format(" %s studname like '%s%%'", id_comboBox.getSelectedItem(), nameFilterStart_textField.getText());
            }else{
                filterString += String.format(" %s studname like '%s%%'", id_comboBox.getSelectedItem(),nameFilterStart_textField.getText());
            }
            //filterString = " WHERE studName like '" + snameFilter.getText() + "%' ";
        }
        if(!nameFilterEnd_textField.getText().equals("")){
            if(idFilter_textField.getText().equals("") && nameFilterStart_textField.getText().equals("")){
                filterString = String.format("WHERE studName like '%%%s'", nameFilterEnd_textField.getText());
            }else if(nameFilterStart_textField.getText().equals("")){
                filterString += String.format(" %s studName like '%%%s'", id_comboBox.getSelectedItem(), nameFilterEnd_textField.getText());
            }else if(!nameFilterStart_textField.getText().equals("") && idFilter_textField.getText().equals("")){
                filterString += String.format(" AND studName like '$$$s'", nameFilterEnd_textField.getText());
            }else{
                filterString += String.format(" AND studName like '$$$s'", nameFilterEnd_textField.getText());
            }
            //filterString = " WHERE studName like '%" + nameFilterEnd_textField.getText() + "' ";
        }
        if(!addrFilterStart_textField.getText().equals("")){
            if(idFilter_textField.getText().equals("") && nameFilterStart_textField.getText().equals("") && nameFilterEnd_textField.getText().equals("")){
                filterString = String.format("WHERE studaddr like '%s%%'", addrFilterStart_textField.getText());
            }else if(!addrFilterEnd_textField.getText().equals("")){
                filterString += String.format(" %s studaddr like '%s%%'", addr_comboBox.getSelectedItem(), addrFilterStart_textField.getText());
            }else{
                filterString += String.format(" %s studaddr like '%s%%'", addr_comboBox.getSelectedItem(), addrFilterStart_textField.getText());
            }
            // = " WHERE studaddr like '" + addrFilterStart_textField.getText() + "%' ";
        }
        if(!addrFilterEnd_textField.getText().equals("")){
            if(idFilter_textField.getText().equals("") && nameFilterStart_textField.getText().equals("") && nameFilterEnd_textField.getText().equals("") && addrFilterStart_textField.getText().equals("")){
                filterString = String.format("WHERE studaddr like '%%%s'", addrFilterEnd_textField.getText());
            }else if (addrFilterStart_textField.getText().equals("")){
                filterString += String.format(" %s studaddr like '%%%s'", addr_comboBox.getSelectedItem(), addrFilterEnd_textField.getText());
            }else if (addrFilterStart_textField.getText().equals("") && idFilter_textField.getText().equals("") && nameFilterStart_textField.getText().equals("") && nameFilterEnd_textField.getText().equals("")){
                filterString += String.format(" AND studaddr like '%%%s'", addrFilterEnd_textField.getText());
            }else{
                filterString += String.format(" AND studaddr like '%%%s'", addrFilterEnd_textField.getText());
            }
            //filterString = " WHERE studaddr like '%" + addrFilterEnd_textField.getText() + "' ";
        }
        if(!crsFilter_textField.getText().equals("")){
            if(idFilter_textField.getText().equals("") && nameFilterStart_textField.getText().equals("") && nameFilterEnd_textField.getText().equals("") && addrFilterStart_textField.getText().equals("") && addrFilterEnd_textField.getText().equals("")){
                filterString = String.format("WHERE studcrs like '%s%%'", crsFilter_textField.getText());
            }else{
                filterString += String.format(" %s studcrs like '%s%%'", crs_comboBox.getSelectedItem(), crsFilter_textField.getText());
            }
            //filterString = " WHERE studcrs='" + crsFilter_textField.getText() + "' ";
        }
        if(!genderFilter_textField.getText().equals("")){
            if(idFilter_textField.getText().equals("") && nameFilterStart_textField.getText().equals("") && nameFilterEnd_textField.getText().equals("") && addrFilterStart_textField.getText().equals("") && addrFilterEnd_textField.getText().equals("") && crsFilter_textField.getText().equals("")){
                filterString = String.format("WHERE studGender like '%s%%'", genderFilter_textField.getText());
            }else{
                filterString += String.format(" %s studGender like '%s%%'", gender_comboBox.getSelectedItem(), genderFilter_textField.getText());
            }   
            //filterString = " WHERE studGender='" + genderFilter.getText() + "' ";
        }
        if(!yearFilter_textField.getText().equals("")){
            if(idFilter_textField.getText().equals("") && nameFilterStart_textField.getText().equals("") && nameFilterEnd_textField.getText().equals("") && addrFilterStart_textField.getText().equals("") && addrFilterEnd_textField.getText().equals("") && crsFilter_textField.getText().equals("") && genderFilter_textField.getText().equals("")){
                filterString = String.format("WHERE yrlvl like '%s%%'", yearFilter_textField.getText());
            }else{
                filterString += String.format(" %s yrlvl like '%s%%'", year_comboBox.getSelectedItem(), yearFilter_textField.getText());
            }
            //filterString = " WHERE yrlvl='" + yearFilter_textField.getText() + "' ";
        }
        db.connectDB();
        db.executeQuery("SELECT * FROM Students " + filterString);
        filterSQL.GetFiltered_ResultSetSQL(this.getName(), students_table, "SELECT * FROM Students " + filterString);
        
        // returns filterString for IsFilterEmpty
        return filterString;
    }
    
    private void id_comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_id_comboBoxActionPerformed
        GetFilterSQL();
       
    }//GEN-LAST:event_id_comboBoxActionPerformed

    private void idLogic_comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idLogic_comboBoxActionPerformed
        GetFilterSQL();
    }//GEN-LAST:event_idLogic_comboBoxActionPerformed

    private void name_comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_name_comboBoxActionPerformed
        GetFilterSQL();
    }//GEN-LAST:event_name_comboBoxActionPerformed

    private void addr_comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addr_comboBoxActionPerformed
        GetFilterSQL();
    }//GEN-LAST:event_addr_comboBoxActionPerformed

    private void crs_comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crs_comboBoxActionPerformed
        GetFilterSQL();
    }//GEN-LAST:event_crs_comboBoxActionPerformed

    private void gender_comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gender_comboBoxActionPerformed
         GetFilterSQL();
    }//GEN-LAST:event_gender_comboBoxActionPerformed

    private void year_comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_year_comboBoxActionPerformed
         GetFilterSQL();
    }//GEN-LAST:event_year_comboBoxActionPerformed

    private void idFilter_textFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idFilter_textFieldKeyReleased
         GetFilterSQL();
       
    }//GEN-LAST:event_idFilter_textFieldKeyReleased

    private void nameFilterStart_textFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameFilterStart_textFieldKeyReleased
         GetFilterSQL();
    }//GEN-LAST:event_nameFilterStart_textFieldKeyReleased

    private void nameFilterEnd_textFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameFilterEnd_textFieldKeyReleased
         GetFilterSQL();
    }//GEN-LAST:event_nameFilterEnd_textFieldKeyReleased

    private void addrFilterStart_textFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addrFilterStart_textFieldKeyReleased
       GetFilterSQL();
    }//GEN-LAST:event_addrFilterStart_textFieldKeyReleased

    private void addrFilterEnd_textFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addrFilterEnd_textFieldKeyReleased
        GetFilterSQL();
    }//GEN-LAST:event_addrFilterEnd_textFieldKeyReleased

    private void crsFilter_textFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_crsFilter_textFieldKeyReleased
        GetFilterSQL();
    }//GEN-LAST:event_crsFilter_textFieldKeyReleased

    private void genderFilter_textFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_genderFilter_textFieldKeyReleased
        GetFilterSQL();
    }//GEN-LAST:event_genderFilter_textFieldKeyReleased

    private void yearFilter_textFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yearFilter_textFieldKeyReleased
        GetFilterSQL();
    }//GEN-LAST:event_yearFilter_textFieldKeyReleased

    // variable to know which id is selected in the table
    // to be used for passing id to secondary table
    static String selected_studid;
    private void students_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_students_tableMouseClicked
        String studid;
        String studname;
        String studaddr;
        String studcrs;
        String studgender;
        String yrlvl;
        
        int[] selectedRows = students_table.getSelectedRows();
        studid = students_table.getValueAt(selectedRows[0], 0).toString();
        selected_studid = studid;
        studname = students_table.getValueAt(selectedRows[0], 1).toString();
        studaddr = students_table.getValueAt(selectedRows[0], 2).toString();
        studcrs = students_table.getValueAt(selectedRows[0], 3).toString();
        studgender = students_table.getValueAt(selectedRows[0], 4).toString();
        yrlvl = students_table.getValueAt(selectedRows[0], 5).toString();
        id_textField.setText(studid);
        name_textField.setText(studname);
        address_textField.setText(studaddr);
        course_textField.setText(studcrs);
        gender_textField.setText(studgender);
        year_textField.setText(yrlvl);
        sql.GetSecondaryResultSetSQL(this.getName(), enrolledSubj_table, selected_studid);
    }//GEN-LAST:event_students_tableMouseClicked
    
    // refers to the selected subjid in the enrolled table.
    static String selected_enrollsubjid;
    private void enrolledSubj_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enrolledSubj_tableMouseClicked
        String subjid; 
        int[] selectedRows = enrolledSubj_table.getSelectedRows();
        subjid = enrolledSubj_table.getValueAt(selectedRows[0], 0).toString();
        selected_enrollsubjid = subjid;
    }//GEN-LAST:event_enrolledSubj_tableMouseClicked

    private void enrollAdd_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enrollAdd_buttonActionPerformed
       StudentsJFrame studentsJFrame = new StudentsJFrame();
       SubjectsJFrame subjectsJFrame = new SubjectsJFrame();
      
       int confirmAdd = JOptionPane.showConfirmDialog(studentsJFrame,"Enroll SubjectID: " + SubjectsJFrame.selected_subjid + " to StudentID: " + selected_studid);
       if (confirmAdd == JOptionPane.YES_OPTION){
           Enroll enroll = new Enroll();
           enroll.InsertSQLToEnroll(selected_studid, SubjectsJFrame.selected_subjid, this.getName(), students_table, enrolledSubj_table);
           JOptionPane.showMessageDialog(studentsJFrame, "Successfully enrolled.");
           sql.GetResultSetSQL(subjectsJFrame.GetJFrame(), subjectsJFrame.GetJTable());
           
       }
    
       
    }//GEN-LAST:event_enrollAdd_buttonActionPerformed

    private void enrollDrop_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enrollDrop_buttonActionPerformed

       StudentsJFrame studentsJFrame = new StudentsJFrame();
       int confirmAdd = JOptionPane.showConfirmDialog(studentsJFrame,"Drop SubjectID: " + selected_enrollsubjid + " to StudentID: " + selected_studid);
       if (confirmAdd == JOptionPane.YES_OPTION){
           Enroll enroll = new Enroll();
           enroll.DeleteSQLToEnroll(selected_studid, selected_enrollsubjid, this.getName(), students_table, enrolledSubj_table);
           JOptionPane.showMessageDialog(studentsJFrame, "Successfully dropped.");
       }
    }//GEN-LAST:event_enrollDrop_buttonActionPerformed
  
  private final String template_createNewDB = "CREATE DATABASE ";
  private final String template_createNewTable = "CREATE TABLE ";
  private final int currentYear = Calendar.getInstance().get(Calendar.YEAR);
  private int nextYear = currentYear + 1;
  private void createDBTables(String semesterInfo){
      String tableSemName = "";
      if (semesterInfo.equalsIgnoreCase("firstSem")){
            tableSemName = template_createNewTable + "1st_sy" + currentYear + "_" + nextYear;
      }
      else if (semesterInfo.equalsIgnoreCase("secondSem")){
            tableSemName = template_createNewTable + "2nd_sy" + currentYear + "_" + nextYear;
      }
      else if (semesterInfo.equalsIgnoreCase("summer")){
            tableSemName = template_createNewTable + "summer_sy" + currentYear + "_" + nextYear;
      }
  String studentsSQL = new StringBuilder()
  .append(tableSemName)
  // .Students represents the name of the table
  .append(".Students (")
  .append("studid int, ")
  .append("studname varchar(50), ")
  .append("studaddr varchar(50), ")
  .append("studcrs varchar(50), ")
  .append("studgender varchar(50), ")
  .append("yrlvl varchar(50), ")
  .append("PRIMARY KEY (studid)) ")
.toString();
  
   String subjectsSQL = new StringBuilder()
  .append(tableSemName)
  .append(".Subjects (")
  .append("subjid int, ")
  .append("subjode varchar(50), ")
  .append("subjdesc varchar(50), ")
  .append("subjunits varchar(50), ")
  .append("subjsched varchar(50), ")
  .append("PRIMARY KEY (subjid)) ")
  .toString();
  
  String teachersSQL = new StringBuilder()
  .append(tableSemName)
  .append(".Teachers (")
  .append("Tid int, ")
  .append("Tname varchar(50), ")
  .append("Tdept varchar(50), ")
  .append("Taddr varchar(50), ")
  .append("Tcontact varchar(50), ")
  .append("Tstatus varchar(50), ")
  .append("PRIMARY KEY (Tid)) ")
  .toString();
  
   String gradesSQL = new StringBuilder()
  .append(tableSemName)
  .append(".Grades (")
  .append("gradeid int, ")
  .append("prelim varchar(50), ")
  .append("midterm varchar(50), ")
  .append("prefinal varchar(50), ")
  .append("final varchar(50), ")
  .append("PRIMARY KEY (gradeid)) ")
  .toString();
   
   String enrollSQL = new StringBuilder()
  .append(tableSemName)
  .append(".Enroll (")
  .append("eid int, ")
  .append("studid int, ")
  .append("subjid int, ")
  .append("PRIMARY KEY (eid), ")
  .append("FOREIGN KEY (`studid`) REFERENCES `Students`(`studid`),")
  .append("FOREIGN KEY (`subjid`) REFERENCES `Subjects`(`subjid`))")
  .toString();
   
   String assignSQL = new StringBuilder()
  .append(tableSemName)
  .append(".Assign (")
  .append("dateassigned Date, ")
  .append("Tid int, ")
  // UNIQUE removes duplicates
  // since instruction restricts duplicate of studid
  .append("subjid int UNIQUE, ")
  .append("FOREIGN KEY (`Tid`) REFERENCES `Teachers`(`Tid`),")
  .append("FOREIGN KEY (`subjid`) REFERENCES `Subjects`(`subjid`))")
  .toString();
   
  String transactionChargesSQL = new StringBuilder()
  .append(tableSemName)
  .append(".TransactionCharges (")
  .append("transid int, ")
  .append("department DECIMAL(15,2), ")
  .append("subjunits DECIMAL(15,2), ")
  .append("insurance DECIMAL(15,2), ")
  .append("computer DECIMAL(15,2), ")
  .append("laboratory DECIMAL(15,2), ")
  .append("cultural DECIMAL(15,2), ")
  .append("library DECIMAL(15,2), ")
  .append("PRIMARY KEY (transid)) ")
  .toString();
   
  String invoiceSQL = new StringBuilder()
  .append(tableSemName)
  .append(".Invoice (")
  .append("dateassigned Date, ")
  // UNIQUE removes duplicates
  // since instruction restricts duplicate of studid
  .append("studid int UNIQUE, ")
  .append("transid int, ")
  .append("FOREIGN KEY (`studid`) REFERENCES `Students`(`studid`),")
  .append("FOREIGN KEY (`transid`) REFERENCES `TransactionCharges`(`transid`))")
  .toString();
   
   
  db.connectDB();
  try {
      // creates a statement in order for getStatement
      // to have an actual statement and not
      // throw a nullexception
      db.setStatement(db.getConn().createStatement());
      // adds SQL string to batches in order
      // to execute multiple sqls at the same time
      db.getStatement().addBatch(studentsSQL);
      db.getStatement().addBatch(subjectsSQL);
      db.getStatement().addBatch(teachersSQL);
      db.getStatement().addBatch(gradesSQL);
      db.getStatement().addBatch(enrollSQL);
      db.getStatement().addBatch(assignSQL);
      db.getStatement().addBatch(transactionChargesSQL);
      db.getStatement().addBatch(invoiceSQL);
      db.getStatement().executeBatch();
  }catch(SQLException ex) {
      ex.printStackTrace();
  }
  
    }
  
    private void firstSem_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstSem_MenuActionPerformed
        String createNewDB;
        createNewDB = template_createNewDB + "1st_sy" + currentYear + "_"+ nextYear;
        db.connectDB();
        // creates a new DB using concatenated string
        db.executeUpdate(createNewDB);
        
        String semesterInfo = "firstSem";
        createDBTables(semesterInfo);
        
        
    }//GEN-LAST:event_firstSem_MenuActionPerformed

    private void secondSem_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondSem_MenuActionPerformed
        String createNewDB;
        createNewDB = template_createNewDB + "2nd_sy" + currentYear + "_"+ nextYear;
        db.connectDB();
        // creates a new DB using concatenated string
        db.executeUpdate(createNewDB);
        String semesterInfo = "secondSem";
        createDBTables(semesterInfo);
        
        
        
    }//GEN-LAST:event_secondSem_MenuActionPerformed

    private void summer_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_summer_MenuActionPerformed
        String createNewDB;
        createNewDB = template_createNewDB + "summer_sy" + currentYear + "_"+ nextYear;
        db.connectDB();
        // creates a new DB using concatenated string
        db.executeUpdate(createNewDB);
        String semesterInfo = "summer";
        createDBTables(semesterInfo);
        
    }//GEN-LAST:event_summer_MenuActionPerformed
    // for testing purposes only, remove in final
    private void delete_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_MenuActionPerformed
       db.connectDB();
       String removeDB1 = "DROP DATABASE 1st_sy2022_2023";
       String removeDB2 = "DROP DATABASE 2nd_sy2022_2023";
       String removeDB3 = "DROP DATABASE summer_sy2022_2023";
       try {
      db.setStatement(db.getConn().createStatement());
      db.getStatement().addBatch(removeDB1);
      db.getStatement().addBatch(removeDB2);
      db.getStatement().addBatch(removeDB3);
      db.getStatement().executeBatch();
       } catch(SQLException ex){
      
          ex.printStackTrace();
   
       }
      
       
    }//GEN-LAST:event_delete_MenuActionPerformed
    public JTable GetJTable(){
        
        return students_table;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentsJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentsJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addrFilterEnd_textField;
    private javax.swing.JTextField addrFilterStart_textField;
    private javax.swing.JComboBox<String> addr_comboBox;
    private javax.swing.JTextField address_textField;
    private javax.swing.JTextField course_textField;
    private javax.swing.JTextField crsFilter_textField;
    private javax.swing.JComboBox<String> crs_comboBox;
    private javax.swing.JMenuItem delete_Menu;
    private javax.swing.JButton delete_button;
    private javax.swing.JButton enrollAdd_button;
    private javax.swing.JButton enrollDrop_button;
    private javax.swing.JTable enrolledSubj_table;
    private javax.swing.JMenuItem firstSem_Menu;
    private javax.swing.JTextField genderFilter_textField;
    private javax.swing.JComboBox<String> gender_comboBox;
    private javax.swing.JTextField gender_textField;
    private javax.swing.JTextField idFilter_textField;
    private javax.swing.JComboBox<String> idLogic_comboBox;
    private javax.swing.JComboBox<String> id_comboBox;
    private javax.swing.JTextField id_textField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField nameFilterEnd_textField;
    private javax.swing.JTextField nameFilterStart_textField;
    private javax.swing.JComboBox<String> name_comboBox;
    private javax.swing.JTextField name_textField;
    private javax.swing.JButton save_button;
    private javax.swing.JMenuItem secondSem_Menu;
    private javax.swing.JMenuItem students_item;
    private javax.swing.JTable students_table;
    private javax.swing.JMenuItem subjects_item;
    private javax.swing.JMenuItem summer_Menu;
    private javax.swing.JMenuItem teachers_item;
    private javax.swing.JButton update_button;
    private javax.swing.JTextField yearFilter_textField;
    private javax.swing.JComboBox<String> year_comboBox;
    private javax.swing.JTextField year_textField;
    // End of variables declaration//GEN-END:variables
}
